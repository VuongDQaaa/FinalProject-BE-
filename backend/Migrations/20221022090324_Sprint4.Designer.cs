// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20221022090324_Sprint4")]
    partial class Sprint4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("backend.Entities.AssignedTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<string>("AutoFill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignedTask");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            AutoFill = "Teacher - Sinh",
                            SubjectId = 1,
                            SubjectName = "Sinh",
                            UserId = 2,
                            UserName = "Teacher"
                        },
                        new
                        {
                            TaskId = 2,
                            AutoFill = "Teacher - Toan",
                            SubjectId = 2,
                            SubjectName = "Toan",
                            UserId = 2,
                            UserName = "Teacher"
                        },
                        new
                        {
                            TaskId = 3,
                            AutoFill = "Teacher1 - Toan",
                            SubjectId = 2,
                            SubjectName = "Toan",
                            UserId = 3,
                            UserName = "Teacher1"
                        });
                });

            modelBuilder.Entity("backend.Entities.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassroomId"), 1L, 1);

                    b.Property<string>("ClassroomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("ClassroomId");

                    b.ToTable("Classroom", (string)null);

                    b.HasData(
                        new
                        {
                            ClassroomId = 1,
                            ClassroomName = "10 Sinh",
                            EndYear = 2018,
                            Grade = "10",
                            StartYear = 2015
                        },
                        new
                        {
                            ClassroomId = 2,
                            ClassroomName = "10 Toan",
                            EndYear = 2018,
                            Grade = "10",
                            StartYear = 2015
                        });
                });

            modelBuilder.Entity("backend.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<string>("AutoFillClassroom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutoFillTeacher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            ScheduleId = 1,
                            AutoFillClassroom = "Sinh - Teacher",
                            AutoFillTeacher = "Sinh - 10 Sinh",
                            ClassroomId = 1,
                            Day = 0,
                            Period = 1,
                            Session = 0,
                            TaskId = 1,
                            UserId = 2
                        },
                        new
                        {
                            ScheduleId = 2,
                            AutoFillClassroom = "Toan - Teacher",
                            AutoFillTeacher = "Toan - 10 Sinh",
                            ClassroomId = 1,
                            Day = 0,
                            Period = 2,
                            Session = 0,
                            TaskId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("backend.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<int?>("ClassroomId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ClassroomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDiabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Student", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            ClassroomId = 1,
                            ClassroomName = "10 Sinh",
                            DateOfBirth = new DateTime(2000, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Le",
                            Gender = 1,
                            IsDiabled = false,
                            IsFirstLogin = false,
                            LastName = "Thi Van",
                            PasswordHash = "$2a$11$uY/Hk3fP/cuU1SBey6KUm.py2qAtSrVP8iX7NeI72WYJooPbkew7W",
                            Role = 2,
                            StudentCode = "ST1",
                            UserName = "Student1"
                        },
                        new
                        {
                            StudentId = 2,
                            ClassroomId = 1,
                            ClassroomName = "10 Sinh",
                            DateOfBirth = new DateTime(2000, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nguyen",
                            Gender = 0,
                            IsDiabled = false,
                            IsFirstLogin = false,
                            LastName = "Van A",
                            PasswordHash = "$2a$11$tujhn88VueFsYUrLKupyAOwSgLYcOQ2dy8SYBg5jTzFsBLx3UA34K",
                            Role = 2,
                            StudentCode = "ST2",
                            UserName = "Student2"
                        },
                        new
                        {
                            StudentId = 3,
                            ClassroomId = 2,
                            ClassroomName = "10 Toan",
                            DateOfBirth = new DateTime(2000, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nguyen",
                            Gender = 0,
                            IsDiabled = false,
                            IsFirstLogin = false,
                            LastName = "Van B",
                            PasswordHash = "$2a$11$W2NOpV3IdTfaMh5zgZpfUuwuZII3N0KhSQ39PdQsXi4hjIGS2A4.O",
                            Role = 2,
                            StudentCode = "ST4",
                            UserName = "Student3"
                        });
                });

            modelBuilder.Entity("backend.Entities.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"), 1L, 1);

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            SubjectName = "Sinh"
                        },
                        new
                        {
                            SubjectId = 2,
                            SubjectName = "Toan"
                        });
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDiabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DateOfBirth = new DateTime(2000, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dao",
                            Gender = 0,
                            IsDiabled = false,
                            IsFirstLogin = false,
                            LastName = "Quy Vuong",
                            PasswordHash = "$2a$11$8KY/2lOYhiyW8IYRGVgi9OFaLm/ZDvQg.BIXFyqHbJb9gyJZvoWau",
                            Role = 0,
                            UserCode = "AD1",
                            UserName = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            DateOfBirth = new DateTime(2000, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Do",
                            Gender = 0,
                            IsDiabled = false,
                            IsFirstLogin = false,
                            LastName = "Duy Nam",
                            PasswordHash = "$2a$11$cPV9dRuSv5IHV2e9iXdORei0arwGuGyR1ahnfhk0qqKNjKAo4d1J.",
                            Role = 1,
                            UserCode = "TC1",
                            UserName = "Teacher"
                        },
                        new
                        {
                            UserId = 3,
                            DateOfBirth = new DateTime(2000, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Do",
                            Gender = 1,
                            IsDiabled = false,
                            IsFirstLogin = false,
                            LastName = "Thu Huong",
                            PasswordHash = "$2a$11$HMmWX7nwEuE7opWM2pR5Uux7R1Wi8kUlstbPdHvPD3TcUJMRezGlG",
                            Role = 1,
                            UserCode = "TC2",
                            UserName = "Teacher1"
                        });
                });

            modelBuilder.Entity("backend.Entities.AssignedTask", b =>
                {
                    b.HasOne("backend.Entities.Subject", "Subject")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.User", "Teacher")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("backend.Entities.Schedule", b =>
                {
                    b.HasOne("backend.Entities.Classroom", "Classroom")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.AssignedTask", "AssignedTask")
                        .WithMany("Schedules")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.User", "Teacher")
                        .WithMany("Schedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTask");

                    b.Navigation("Classroom");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("backend.Entities.Student", b =>
                {
                    b.HasOne("backend.Entities.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("backend.Entities.AssignedTask", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("backend.Entities.Classroom", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("backend.Entities.Subject", b =>
                {
                    b.Navigation("AssignedTasks");
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
